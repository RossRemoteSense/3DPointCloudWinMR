// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel ComputeBrushedIndicesArray
#include "UnityCG.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<float3> debugBuffer1;
RWStructuredBuffer<float3> debugBuffer2;

float4x4 W_Matrix;
float4x4 P_Matrix;
float rand;

float _size;

//*******************
// RANGE FILTERING
//*******************

float _MinX;
float _MaxX;
float _MinY;
float _MaxY;
float _MinZ;
float _MaxZ;

// ********************
// Normalisation ranges
// ********************

float _MinNormX;
float _MaxNormX;
float _MinNormY;
float _MaxNormY;
float _MinNormZ;
float _MaxNormZ;

float3 pointer1;
float3 pointer2;

float width;
float height;
float depth;

float RadiusSphere;

int BrushMode;
int SelectionMode;
float PointClass;

bool HasFreeBrushReset;

RWStructuredBuffer<float3> dataBuffer;
StructuredBuffer<float> filteredIndicesBuffer;
RWStructuredBuffer<int> brushedIndicesBuffer;

//brush circle
bool brush2DInCircle(float3 center, float radius, float3 testPoint)
{
	float4 projectedTest = mul(W_Matrix, float4(testPoint, 1.0));
	float4 projectedCenter = mul(P_Matrix, float4(center, 1.0));

	float3 ndcCent = projectedCenter.xyz / projectedCenter.w;
	float3 ndcTest = projectedTest.xyz / projectedTest.w;

	return sqrt(pow(ndcTest.x - ndcCent.x, 2) + pow(ndcTest.y - ndcCent.y, 2)) < radius;
}

//brush sphere
bool brushSphere(float3 center, float radius, float3 testPoint)
{
	float3 displacementToCenter = testPoint - center;
	float radiusSqr = radius * radius;
	bool intersects = dot(displacementToCenter, displacementToCenter) < radiusSqr;

	return intersects;
}

bool brushCube(float3 TFL, float3 BBR, float3 testPoint)
{
	return (testPoint.x >= TFL.x && testPoint.x <= BBR.x
		&& testPoint.y <= TFL.y && testPoint.y >= BBR.y
		&& testPoint.z >= TFL.z && testPoint.z <= BBR.z);
}

bool brushSquare(float3 tl, float3 tr, float3 bl, float3 br, float4 testPoint)
{
	float4 tlp = mul(W_Matrix, float4(tl, 1.0));
	float4 trp = mul(W_Matrix, float4(tr, 1.0));
	float4 blp = mul(W_Matrix, float4(bl, 1.0));
	float4 brp = mul(W_Matrix, float4(br, 1.0));

	return (testPoint.x >= tlp.x && testPoint.x <= trp.x
		&& testPoint.y <= tlp.y && testPoint.x >= blp.y);
}

/*
Adapts the brush
0 : sphere
1 : cube
2 : square

*/
bool Brush(int brushType, float3 filteredPosition)
{
	switch (brushType)
	{
		//brush sphere
	case 0:
		return brushSphere(pointer1, RadiusSphere, filteredPosition);
		//brush cube
	case 1:
		float3 TL = float3(pointer1.x, pointer1.y, pointer1.z);
		float3 BR = float3(pointer2.x, pointer2.y, pointer2.z);

		if (TL.x > BR.x || TL.y < BR.y || TL.z > BR.z)
		{
			TL = BR;
			BR = float3(pointer1.x, pointer1.y, pointer1.z);
		}

		return brushCube(TL, BR, filteredPosition);
		// brush square
		//case 2: retun brushSquare(pointer1x, pointer1y,pointer2x,pointer2y,filteredPosition);
	default: return false;
	}
}

//*********************************
// helper functions
//*********************************

float normaliseValue(float value, float i0, float i1, float j0, float j1)
{
	float L = (j0 - j1) / (i0 - i1);
	return (j0 - (L * i0) + (L * value));
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// TODO: DOES NOT WORK WITH NEGATIVE WIDTH/HEIGHT/DEPTH

	int idx = id.x + id.y * _size;

	// Ignore indices that are filtered
	//if (!filteredIndicesBuffer[idx])
	{
		float3 filteredPosition = dataBuffer[idx];

		float4 projectedTest = mul(W_Matrix, float4(filteredPosition, 1.0));
		float4 projectedCenter = mul(P_Matrix, float4(pointer1, 1.0));

        // Writing to debug buffers before calling Brush
        debugBuffer1[idx] = float3(filteredPosition);
		debugBuffer2[idx] = float3(pointer1);
        //debugBuffer2[idx] = float3(sqrt(pow(filteredPosition.x - pointer1.x, 2) + pow(filteredPosition.y - pointer1.y, 2)), 0.0, 0.0);

		if (Brush(BrushMode, filteredPosition))
		{
			switch (SelectionMode) {
				// Free selection	
			case 0:
				// Additive selection
			case 1:
				Result[id.xy] = float4(1.0, PointClass, PointClass, PointClass);  // brushed - y = PointClass
				break;

				// Subtractive selection
			case 2:
			default:
				Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);  // not brushed
				break;
			}
		}
		// Free selection un-brushes points
		else if (SelectionMode == 0 && !HasFreeBrushReset)
		{
			Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);  // not brushed
		}
	}
}

[numthreads(32, 32, 1)]
void ComputeBrushedIndicesArray(uint3 id : SV_DispatchThreadID)
{
	int index = id.x + id.y * _size;

	if (Result[id.xy].x > 0.0)
		brushedIndicesBuffer[index] = Result[id.xy].w * 10000000.0;  //RB: 
	else
		brushedIndicesBuffer[index] = -1;
}